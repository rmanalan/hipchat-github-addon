(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.AP = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _ap = _dereq_('./ap');

var _ap2 = _interopRequireDefault(_ap);

module.exports = new _ap2['default']();

},{"./ap":4}],2:[function(_dereq_,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _util = _dereq_('./util');

var _util2 = _interopRequireDefault(_util);

var PostMessage = (function () {
  function PostMessage(data) {
    _classCallCheck(this, PostMessage);

    var d = data || {};
    this._registerListener(d.listenOn);
  }

  // listen for postMessage events (defaults to window).

  _createClass(PostMessage, [{
    key: "_registerListener",
    value: function _registerListener(listenOn) {
      if (!listenOn || !listenOn.addEventListener) {
        listenOn = window;
      }
      listenOn.addEventListener("message", _util2["default"]._bind(this, this._receiveMessage), false);
    }
  }, {
    key: "_receiveMessage",
    value: function _receiveMessage(event) {
      var extensionId = event.data.eid,
          reg = undefined;

      if (extensionId && this._registeredExtensions) {
        reg = this._registeredExtensions[extensionId];
      }

      if (!this._checkOrigin(event, reg)) {
        return false;
      }

      var handler = this._messageHandlers[event.data.type];
      if (handler) {
        handler.call(this, event, reg);
      }
    }
  }]);

  return PostMessage;
})();

module.exports = PostMessage;

},{"./util":3}],3:[function(_dereq_,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LOG_PREFIX = "[Simple-XDM] ";

var Util = (function () {
  function Util() {
    _classCallCheck(this, Util);
  }

  _createClass(Util, [{
    key: "locationOrigin",
    value: function locationOrigin() {
      if (!window.location.origin) {
        return window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port : '');
      } else {
        return window.location.origin;
      }
    }
  }, {
    key: "randomString",
    value: function randomString() {
      return Math.floor(Math.random() * 1000000000).toString(16);
    }
  }, {
    key: "isString",
    value: function isString(str) {
      return typeof str === "string" || str instanceof String;
    }

    // might be un-needed
  }, {
    key: "argumentsToArray",
    value: function argumentsToArray(arrayLike) {
      var array = [];
      for (var i = 0; i < arrayLike.length; i++) {
        array.push(arrayLike[i]);
      }
      return array;
    }
  }, {
    key: "hasCallback",
    value: function hasCallback(args) {
      var length = args.length;
      return length > 0 && typeof args[length - 1] === 'function';
    }
  }, {
    key: "error",
    value: function error(msg) {
      if (window.console) {
        console.error(LOG_PREFIX + msg);
      }
    }
  }, {
    key: "warn",
    value: function warn(msg) {
      if (window.console) {
        console.warn(LOG_PREFIX + msg);
      }
    }
  }, {
    key: "_bind",
    value: function _bind(thisp, fn) {
      if (Function.prototype.bind) {
        return fn.bind(thisp);
      }
      return function () {
        return fn.apply(thisp, arguments);
      };
    }
  }, {
    key: "each",
    value: function each(o, it) {
      var l;
      var k;
      if (o) {
        l = o.length;
        if (l != null && typeof o !== 'function') {
          k = 0;
          while (k < l) {
            if (it.call(o[k], k, o[k]) === false) {
              break;
            }
            k += 1;
          }
        } else {
          for (k in o) {
            if (o.hasOwnProperty(k)) {
              if (it.call(o[k], k, o[k]) === false) {
                break;
              }
            }
          }
        }
      }
    }
  }, {
    key: "extend",
    value: function extend(dest) {
      var args = arguments;
      var srcs = [].slice.call(args, 1, args.length);
      srcs.forEach(function (source) {
        Object.getOwnPropertyNames(source).forEach(function (name) {
          dest[name] = source[name];
        });
      });
      return dest;
    }
  }]);

  return Util;
})();

module.exports = new Util();

},{}],4:[function(_dereq_,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _commonUtil = _dereq_('../common/util');

var _commonUtil2 = _interopRequireDefault(_commonUtil);

var _commonPostmessage = _dereq_('../common/postmessage');

var _commonPostmessage2 = _interopRequireDefault(_commonPostmessage);

var _dollar = _dereq_('./dollar');

var _dollar2 = _interopRequireDefault(_dollar);

var _size = _dereq_('./size');

var _size2 = _interopRequireDefault(_size);

var _resizeListener = _dereq_('./resize-listener');

var _resizeListener2 = _interopRequireDefault(_resizeListener);

var _configurationOptions = _dereq_('./configuration-options');

var _configurationOptions2 = _interopRequireDefault(_configurationOptions);

var _consumerOptions = _dereq_('./consumer-options');

var _consumerOptions2 = _interopRequireDefault(_consumerOptions);

var AP = (function (_PostMessage) {
  _inherits(AP, _PostMessage);

  function AP(options) {
    _classCallCheck(this, AP);

    _get(Object.getPrototypeOf(AP.prototype), 'constructor', this).call(this);
    _configurationOptions2['default'].set(options);
    this._data = this._parseInitData();
    _configurationOptions2['default'].set(this._data.options);
    this._host = window.parent;
    this._hostModules = {};
    this._eventHandlers = {};
    this._pendingCallbacks = {};
    this._setupAPI(this._data.api);
    this._setupAPIWithoutRequire(this._data.api);
    this._messageHandlers = {
      resp: this._handleResponse,
      evt: this._handleEvent
    };
    (0, _dollar2['default'])(_commonUtil2['default']._bind(this, this._autoResizer));
    this._sendInit();
  }

  _createClass(AP, [{
    key: '_autoResizer',
    value: function _autoResizer() {
      this._enableAutoResize = Boolean(_configurationOptions2['default'].get('autoresize'));
      if (_consumerOptions2['default'].get('resize') === false) {
        this._enableAutoResize = false;
      }
      if (this._enableAutoResize) {
        this._initResize();
      }
    }

    /**
    * The initialization data is passed in when the iframe is created as its 'name' attribute.
    * Example:
    * {
    *   extension_id: The ID of this iframe as defined by the host
    *   origin: 'https://example.org'  // The parent's window origin
    *   api: {
    *     _globals: { ... },
    *     messages = {
    *       clear: {},
    *       ...
    *     },
    *     ...
    *   }
    * }
    **/
  }, {
    key: '_parseInitData',
    value: function _parseInitData(data) {
      try {
        return JSON.parse(data || window.name);
      } catch (e) {
        return {};
      }
    }
  }, {
    key: '_createModule',
    value: function _createModule(moduleName, api) {
      var _this = this;

      return Object.getOwnPropertyNames(api).reduce(function (accumulator, functionName) {
        accumulator[functionName] = _this._createMethodHandler({
          mod: moduleName,
          fn: functionName
        });
        return accumulator;
      }, {});
    }
  }, {
    key: '_setupAPI',
    value: function _setupAPI(api) {
      var _this2 = this;

      this._hostModules = Object.getOwnPropertyNames(api).reduce(function (accumulator, moduleName) {
        accumulator[moduleName] = _this2._createModule(moduleName, api[moduleName]);
        return accumulator;
      }, {});

      Object.getOwnPropertyNames(this._hostModules._globals || {}).forEach(function (global) {
        _this2[global] = _this2._hostModules._globals[global];
      });
    }
  }, {
    key: '_setupAPIWithoutRequire',
    value: function _setupAPIWithoutRequire(api) {
      var _this3 = this;

      Object.getOwnPropertyNames(api).forEach(function (moduleName) {
        if (typeof _this3[moduleName] !== "undefined") {
          throw new Error('XDM module: ' + moduleName + ' will collide with existing variable');
        }
        _this3[moduleName] = _this3._createModule(moduleName, api[moduleName]);
      }, this);
    }
  }, {
    key: '_pendingCallback',
    value: function _pendingCallback(mid, fn) {
      this._pendingCallbacks[mid] = fn;
    }
  }, {
    key: '_createMethodHandler',
    value: function _createMethodHandler(methodData) {
      var methodHandler = function methodHandler() {
        var mid = undefined,
            args = _commonUtil2['default'].argumentsToArray(arguments);
        if (_commonUtil2['default'].hasCallback(args)) {
          mid = _commonUtil2['default'].randomString();
          this._pendingCallback(mid, args.pop());
        }
        this._host.postMessage({
          eid: this._data.extension_id,
          type: 'req',
          mid: mid,
          mod: methodData.mod,
          fn: methodData.fn,
          args: args
        }, this._data.origin);
      };

      return _commonUtil2['default']._bind(this, methodHandler);
    }
  }, {
    key: '_handleResponse',
    value: function _handleResponse(event) {
      var data = event.data;
      var pendingCallback = this._pendingCallbacks[data.mid];
      if (pendingCallback) {
        delete this._pendingCallbacks[data.mid];
        pendingCallback.apply(window, data.args);
      }
    }
  }, {
    key: '_handleEvent',
    value: function _handleEvent(event) {
      var sendResponse = function sendResponse() {
        var args = _commonUtil2['default'].argumentsToArray(arguments);
        event.source.postMessage({
          eid: this._data.extension_id,
          mid: event.data.mid,
          type: 'resp',
          args: args
        }, this._data.origin);
      };
      sendResponse = _commonUtil2['default']._bind(this, sendResponse);
      var data = event.data;
      var handler = this._eventHandlers[data.etyp];
      if (handler) {
        handler(data.evnt, sendResponse);
      } else if (data.mid) {
        sendResponse();
      }
    }
  }, {
    key: '_checkOrigin',
    value: function _checkOrigin(event) {
      return event.origin === this._data.origin && event.source === this._host;
    }
  }, {
    key: '_sendInit',
    value: function _sendInit() {
      this._host.postMessage({
        eid: this._data.extension_id,
        type: 'init'
      }, this._data.origin);
    }
  }, {
    key: 'broadcast',
    value: function broadcast(event, evnt) {
      if (!_commonUtil2['default'].isString(event)) {
        throw new Error("Event type must be string");
      }

      this._host.postMessage({
        eid: this._data.extension_id,
        type: 'broadcast',
        etyp: event,
        evnt: evnt
      }, this._data.origin);
    }
  }, {
    key: 'require',
    value: function _dereq_(modules, callback) {
      var _this4 = this;

      var requiredModules = Array.isArray(modules) ? modules : [modules],
          args = requiredModules.map(function (module) {
        return _this4._hostModules[module];
      });
      callback.apply(window, args);
    }
  }, {
    key: 'register',
    value: function register(handlers) {
      this._eventHandlers = handlers || {};
      this._host.postMessage({
        eid: this._data.extension_id,
        type: 'event_query',
        args: Object.getOwnPropertyNames(handlers)
      }, this._data.origin);
    }
  }, {
    key: '_initResize',
    value: function _initResize() {
      var resize = _commonUtil2['default']._bind(this, function () {
        var dimensions = (0, _size2['default'])();
        this.require('env', function (env) {
          if (env && env.resize) {
            env.resize(dimensions.w, dimensions.h);
          }
        });
      });

      resize();
      _resizeListener2['default'].add(resize);
    }
  }]);

  return AP;
})(_commonPostmessage2['default']);

module.exports = AP;

},{"../common/postmessage":2,"../common/util":3,"./configuration-options":5,"./consumer-options":6,"./dollar":8,"./resize-listener":9,"./size":10}],5:[function(_dereq_,module,exports){
/**
* Extension wide configuration values
*/
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ConfigurationOptions = (function () {
  function ConfigurationOptions() {
    _classCallCheck(this, ConfigurationOptions);

    this.options = {};
  }

  _createClass(ConfigurationOptions, [{
    key: "_flush",
    value: function _flush() {
      this.options = {};
    }
  }, {
    key: "get",
    value: function get(item) {
      return item ? this.options[item] : this.options;
    }
  }, {
    key: "set",
    value: function set(data, value) {
      var _this = this;

      if (!data) {
        return;
      }

      if (value) {
        data = _defineProperty({}, data, value);
      }
      var keys = Object.getOwnPropertyNames(data);
      keys.forEach(function (key) {
        _this.options[key] = data[key];
      }, this);
    }
  }]);

  return ConfigurationOptions;
})();

module.exports = new ConfigurationOptions();

},{}],6:[function(_dereq_,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _dollar = _dereq_('./dollar');

var _dollar2 = _interopRequireDefault(_dollar);

var ConsumerOptions = (function () {
  function ConsumerOptions() {
    _classCallCheck(this, ConsumerOptions);
  }

  _createClass(ConsumerOptions, [{
    key: "_getConsumerOptions",
    value: function _getConsumerOptions() {
      var options = {},
          $script = (0, _dollar2["default"])("script[src*='/atlassian-connect/all']");

      if (!($script && /\/atlassian-connect\/all(-debug)?\.js($|\?)/.test($script.attr("src")))) {
        $script = (0, _dollar2["default"])("#ac-iframe-options");
      }

      if ($script && $script.length > 0) {
        // get its data-options attribute, if any
        var optStr = $script.attr("data-options");
        if (optStr) {
          // if found, parse the value into kv pairs following the format of a style element
          optStr.split(";").forEach(function (nvpair) {
            nvpair = nvpair.trim();
            if (nvpair) {
              var nv = nvpair.split(":"),
                  k = nv[0].trim(),
                  v = nv[1].trim();
              if (k && v != null) {
                options[k] = v === "true" || v === "false" ? v === "true" : v;
              }
            }
          });
        }
      }

      return options;
    }
  }, {
    key: "_flush",
    value: function _flush() {
      delete this._options;
    }
  }, {
    key: "get",
    value: function get(key) {
      if (!this._options) {
        this._options = this._getConsumerOptions();
      }
      if (key) {
        return this._options[key];
      }
      return this._options;
    }
  }]);

  return ConsumerOptions;
})();

module.exports = new ConsumerOptions();

},{"./dollar":8}],7:[function(_dereq_,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _dollar = _dereq_('./dollar');

var _dollar2 = _interopRequireDefault(_dollar);

function getContainer() {
  // Look for these two selectors first... you need these to allow for the auto-shrink to work
  // Otherwise, it'll default to document.body which can't auto-grow or auto-shrink
  var container = (0, _dollar2['default'])('.ac-content, #content');
  return container.length > 0 ? container[0] : document.body;
}

module.exports = getContainer;

},{"./dollar":8}],8:[function(_dereq_,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _commonUtil = _dereq_('../common/util');

var _commonUtil2 = _interopRequireDefault(_commonUtil);

var _each = _commonUtil2['default'].each,
    document = window.document;

function $(sel, context) {

  context = context || document;

  var els = [];
  if (sel) {
    if (typeof sel === 'string') {
      var results = context.querySelectorAll(sel),
          arr_results = Array.prototype.slice.call(results);
      Array.prototype.push.apply(els, arr_results);
    } else if (sel.nodeType === 1) {
      els.push(sel);
    } else if (sel === window) {
      els.push(sel);
    } else if (typeof sel === 'function') {
      onDomLoad(sel);
    }
  }

  _commonUtil2['default'].extend(els, {
    each: function each(it) {
      _each(this, it);
      return this;
    },
    bind: function bind(name, callback) {
      this.each(function (i, el) {
        this.bind(el, name, callback);
      });
    },
    attr: function attr(k) {
      var v;
      this.each(function (i, el) {
        v = el[k] || el.getAttribute && el.getAttribute(k);
        return !v;
      });
      return v;
    },
    removeClass: function removeClass(className) {
      return this.each(function (i, el) {
        if (el.className) {
          el.className = el.className.replace(new RegExp('(^|\\s)' + className + '(\\s|$)'), ' ');
        }
      });
    },
    html: function html(_html) {
      return this.each(function (i, el) {
        el.innerHTML = _html;
      });
    },
    append: function append(spec) {
      return this.each(function (i, to) {
        var el = context.createElement(spec.tag);
        _each(spec, function (k, v) {
          if (k === '$text') {
            if (el.styleSheet) {
              // style tags in ie
              el.styleSheet.cssText = v;
            } else {
              el.appendChild(context.createTextNode(v));
            }
          } else if (k !== 'tag') {
            el[k] = v;
          }
        });
        to.appendChild(el);
      });
    }
  });

  return els;
}

function binder(std, odd) {
  std += 'EventListener';
  odd += 'Event';
  return function (el, e, fn) {
    if (el[std]) {
      el[std](e, fn, false);
    } else if (el[odd]) {
      el[odd]('on' + e, fn);
    }
  };
}

$.bind = binder('add', 'attach');
$.unbind = binder('remove', 'detach');

function onDomLoad(func) {
  var w = window,
      readyState = w.document.readyState;

  if (readyState === "interactive" || readyState === "complete") {
    func.call(w);
  } else {
    $.bind(w, "load", function () {
      func.call(w);
    });
  }
}

exports['default'] = $;
module.exports = exports['default'];

},{"../common/util":3}],9:[function(_dereq_,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _documentContainer = _dereq_('./document-container');

var _documentContainer2 = _interopRequireDefault(_documentContainer);

function EventQueue() {
    this.q = [];
    this.add = function (ev) {
        this.q.push(ev);
    };

    var i, j;
    this.call = function () {
        for (i = 0, j = this.q.length; i < j; i++) {
            this.q[i].call();
        }
    };
}

function attachResizeEvent(element, resized) {
    if (!element.resizedAttached) {
        element.resizedAttached = new EventQueue();
        element.resizedAttached.add(resized);
    } else if (element.resizedAttached) {
        element.resizedAttached.add(resized);
        return;
    }

    element.resizeSensor = document.createElement('div');
    element.resizeSensor.className = 'ac-resize-sensor';
    var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;';
    var styleChild = 'position: absolute; left: 0; top: 0;';

    element.resizeSensor.style.cssText = style;
    element.resizeSensor.innerHTML = '<div class="ac-resize-sensor-expand" style="' + style + '">' + '<div style="' + styleChild + '"></div>' + '</div>' + '<div class="ac-resize-sensor-shrink" style="' + style + '">' + '<div style="' + styleChild + ' width: 200%; height: 200%"></div>' + '</div>';
    element.appendChild(element.resizeSensor);

    if (getComputedStyle(element).position === 'static') {
        element.style.position = 'relative';
    }

    var expand = element.resizeSensor.childNodes[0];
    var expandChild = expand.childNodes[0];
    var shrink = element.resizeSensor.childNodes[1];

    var lastWidth, lastHeight;

    var reset = function reset() {
        expandChild.style.width = expand.offsetWidth + 10 + 'px';
        expandChild.style.height = expand.offsetHeight + 10 + 'px';
        expand.scrollLeft = expand.scrollWidth;
        expand.scrollTop = expand.scrollHeight;
        shrink.scrollLeft = shrink.scrollWidth;
        shrink.scrollTop = shrink.scrollHeight;
        lastWidth = element.offsetWidth;
        lastHeight = element.offsetHeight;
    };

    reset();

    var changed = function changed() {
        if (element.resizedAttached) {
            element.resizedAttached.call();
        }
    };

    var onScroll = function onScroll() {
        if (element.offsetWidth !== lastWidth || element.offsetHeight !== lastHeight) {
            changed();
        }
        reset();
    };

    expand.addEventListener('scroll', onScroll);
    shrink.addEventListener('scroll', onScroll);
}

module.exports = {
    add: function add(fn) {
        var container = (0, _documentContainer2['default'])();
        attachResizeEvent(container, fn);
    },
    remove: function remove() {
        var container = (0, _documentContainer2['default'])();
        if (container.resizeSensor) {
            container.removeChild(container.resizeSensor);
            delete container.resizeSensor;
            delete container.resizedAttached;
        }
    }
};

},{"./document-container":7}],10:[function(_dereq_,module,exports){
'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _documentContainer = _dereq_('./document-container');

var _documentContainer2 = _interopRequireDefault(_documentContainer);

var size = function size(width, height, container) {
  var w = width == null ? '100%' : width,
      h,
      docHeight;

  if (!container) {
    container = (0, _documentContainer2['default'])();
  }

  if (height) {
    h = height;
  } else {
    // Determine height
    docHeight = Math.max(container.scrollHeight, document.documentElement.scrollHeight, container.offsetHeight, document.documentElement.offsetHeight, container.clientHeight, document.documentElement.clientHeight);

    if (container === document.body) {
      h = docHeight;
    } else {
      // Started with http://james.padolsey.com/javascript/get-document-height-cross-browser/
      // to determine page height across browsers. Turns out that in our case, we can get by with
      // document.body.offsetHeight and document.body.clientHeight. Those two return the proper
      // height even when the dom shrinks. Tested on Chrome, Safari, IE8/9/10, and Firefox
      h = Math.max(container.offsetHeight, container.clientHeight);
      if (h === 0) {
        h = docHeight;
      }
    }
  }
  return { w: w, h: h };
};

module.exports = size;

},{"./document-container":7}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;base64,
